SECCIÓN 12: HEROESAPP - RUTAS HIJAS Y LAZYLOAD
11 CLASES - 55 MIN
Video 170. Introducción a la sección - 02:26
Video resumen explicado de lo que se hará en el la sección.

Video 171. Temas puntuales de la sección - 00:23
Script de lo que se va a realizar en la sección.

Video 172. Demostración del objetivo final de la sección - 01:39
Visión general del proyecto que se hará. Nada de estilos.

Video 173. Inicio de proyecto - HeroesApp - 05:46
Bash: ng new 05heroesApp

Se utilizará e instalará Angular Material en esta sección https://material.angular.io/

Video 174. Módulos y componentes iniciales - 08:43
Creacon de modelos y componentes varios para tener lista la arquitectura interna de la aplicación.

Video 175. Rutas principales - Root - 06:28
Creamos el archivo routing y colocamos la ruta principal para la pagina de error 404. No cargamos ninguna otra ruta.

Video 176. Rutas hijas y LazyLoad - AuthRoutes - 11:49
LazyLoads significa “Carga on demand”. IMPORTANTE: Se realizaron las rutas hijas, procedimiento paso a paso, en un archivo en la aplicación para el Auth.

Video 177. Tarea - Rutas Hijas de Héroes - 05:26
Agregar rutas hijas para los “Héroes” utilizando el mismo método visto en el video anterior.

Video 178. Resolución de la tarea - Rujas Hijas de Héroes - 07:36
Solución de la tarea.

Video 179. Mostrar Rutas Hijas - Segundo RouterOutlet - 04:29
Agregar componente y un nuevo “router-outlet” para que se vea la información.

Video 180. Código fuente de la sección - 00:15
Descargar los códigos hechos en la sección.



SECCIÓN 13: HEROESAPP - ANGULAR MATERIAL & ANGULAR FLEX-LAYOUT
22 CLASES - 2 H 25 MIN
Video 181. Introducción a la sección - 02:22
Se comenta lo que vamos a hacer, es una continuación de la sección anterior. Uso de Material Design y personalizar gráficamente la aplicación y el uso de un Json-server para mantener un pequeño backend.

Video 182. Temas puntuales de la sección - 00:22
Lo dicho anteriormente de forma escrita.

Video 183. Demostración del objetivo final de la sección - 01:39
El resultado final de lo que se hará en la sección.

Video 184. Continuación del proyecto - HeroesApp - 05:34
Estilos varios.

https://www.npmjs.com/package/@angular/flex-layout
https://material.angular.io/
https://fonts.google.com/icons?selected=Material+Icons

Video 185. Material Sidenav, Toolbar e iconos - 10:04
Agregamos el sidebar y componentes adicionales.

Video 186. Material Navlist - 10:26
Agregamos el enrolamiento dentro del SideBar.

Video 187. Heroes Backend - json-server - 07:21
Quiero evitar agregar información de forma local. Para eso usamos json-server.

Para correr el backend debemos dejarlo corriendo en un bash con el siguiente comando:

Json-server --watch db.json

Y luego podemos revisar que este corriendo en PostMan o en el browser. Dejamos las configuraciones hechas para consumir la API

https://www.npmjs.com/package/json-server
https://gist.github.com/Klerith/403c91e61d3c87284beb0dd138619958
https://quicktype.io/

Video 188. Heroes Service - Traer información de los héroes - 07:48
Consumimos la información y la dejamos en consola.

Video 189. Interfaz Héroe - 07:52
Realizamos el archivo interface para definir qué tipo de valores tiene la colección. Tarea donde traemos la información del JSON a renderizar en el HTML.

Video 190. Material Card - Flex Layout - 08:44
Utilizamos un nuevo Modulo de Material: card. Renderizamos la información en pantalla.

Video 191. Flex Layout - Diferentes resoluciones - 06:43
Responsive con Material.

Video 192. Tarea - HeroeTarjetaComponent - 05:49
Sacar la tarjeta y usarlo como un componente reutilizable.

Video 193. Tarea - PipeImagen - 06:23
Vamos a usar un pipe para condicionar en caso de que el Héroe tenga o no una imagen. Por lo tanto se hará un pipe personalizado.

Video 194. Tarea - Ruta Héroe y Editar Héroe - 07:41
Hacer que los botones de la tarjeta funcionen y nos lleven a una ruta en particular. Se utiliza params y se deja hasta ahí para continuar después.

Video 195. Pantalla de Héroe - 10:34
Se hace como tarea el tomar el id de la ruta y se hace que se imprima por pantalla con formato JSON.

Video 196. Diseño de la pantalla de Héroe - 06:39
Hacer un diseño para ver la información obtenida en el video anterior.

Video 197. Variables de entorno - 04:59
El tener URL con raid “http://localhost:XXXX” hace que sea complejo el poder transportar esta información a un host definitivo, ya que no funcionará como localHost. Es por eso que se hace una variable para cambiar dicha raíz para cuando estemos en producción o en desarrollo.

Video 198. Material Autocomplete - 11:31
Ahora trabajamos en “/buscar”. Comenzamos con el autocomplete. 

NOTA: Por algún motivo me bota la ruta el hacer el autocomplete. No puedo terminar de hacer el ejercicio.

Video 199. Autocomplete - Segunda Parte - 10:03
Terminando el autocomplete.

Video 200. Tarea - Autocomplete cuando no encontró nada - 08:49
Agregando condiciones al autocomplete.

Video 201. Resumen de la sección - 03:27
Lo que se ha hecho y lo que se espera para la próxima sección

Video 202. Código fuente de la sección - 00:10
Descarga del código que se ha hecho durante la sección.



SECCIÓN 14: HEROESAPP - CRUD (CONTINUACION CON ANGULAR MATERIAL)
15 CLASES - 1 H 27 MIN
Video 203. Introducción a la sección - 02:31
Resumen de lo que se espera hacer en la sección. Sección importante por ser la primera vez que se hará CRUD completo.

Video 204. Temas puntuales de la sección - 00:09
Texto con resumen de lo que se dijo en el video anterior.

Video 205. Demostración del objetivo final de la sección - 01:58
Demostración gráfica de lo que se espera para la sección.

Video 206. Continuación del proyecto - HeroesApp - 02:48
Descargar e instalar paquetes NPM y dejar corriendo la aplicación, tanto el back como el front.

Video 207. Diseño de la pantalla para agregar héroes - 12:30
Armando un formulario tipo para poder agregar un héroe.

Video 208. Insertar en base de datos - 10:36
Se realizan los endpoints en el heroes.service.ts. Luego se llama en el constructor del componente donde estamos trabajando y hacemos la petición al momento de hacer click en el formulario.

Video 209. Editar héroes - 10:42
Agregamos el metodo PUT en heroe.service.ts. Incorporamos la información, para rutiar la información a editar e incorporamos los condicionales para el botón del formulario, donde “si existe un Id, entonces envíame a la ruta de editar, y si no existe, agrega uno nuevo. Ojo con el tuteo utilizando el params, para obtener la información que aparece en la URL.

Video 210. Excepciones en nuestro ImagenPipe - 08:07
Modificamos el Pipe para que pueda aparecer la información y manejamos las excepciones para que no veamos errores en consola por undefined que aparecen en algunas partes del código.

Video 211. Eliminar registros - 06:21
Ultimo Endpoint. Utilizamos el método delete. Hacemos el botón, llamamos el método en el service y realizamos la funcionalidad.

Video 212. Pipes Puros e Impuros - 05:50
Tenemos el inconveniente de cambiar la imagen y necesitamos refrescar la pagina para que se actualice la imagen. Vamos al Pipe, invocamos el pure y lo definimos como false. Esto realiza que la imagen se renderice nuevamente cuando se detecte un cambio.

Video 213. Material Snackbar - 06:30
Imprimir en pantalla que se realizó una acción luego de ejecutar una acción en la pagina (como agregar, modificar, borrar).

Video 214. Material Dialog - 07:46
Cuando nosotros queremos borrar un personaje, queremos que aparezca un aviso que nos diga que lo vamos a borrar para hacer una doble confirmación de la acción que estamos ejecutando.

Video 215. Información desde y hacia el dialogo - 06:25
“Pimponear” la información entre módulos para tener la información disponible.

Video 216. Adecuar los textos de la pantalla de agregar - 04:36
Renderizado condicional para la vista de agregar y editar, para que el titulo se vea adhoc a lo que se esta realizando.

Video 217. Código fuente de la sección - 00:09
Imagen con la información para descargar los códigos realizados en esta sección